{% extends 'base.html.twig' %}

{% block body %}
    <div class="container mx-auto p-6">
        <h1 class="text-3xl font-bold mb-6">{{ 'pizza.create'|trans }}</h1>

        {{ form_start(form, {'attr': {'class': 'bg-white shadow-md rounded-lg p-6'}}) }}
        <div class="space-y-4">
            {{ form_row(form.name, {'attr': {'class': 'w-full p-2 border rounded-lg'}}) }}
            {{ form_row(form.price, {'attr': {'class': 'w-full p-2 border rounded-lg'}}) }}
            {{ form_row(form.priceSmall, {'attr': {'class': 'w-full p-2 border rounded-lg price-small'}}) }}
            {{ form_row(form.priceLarge, {'attr': {'class': 'w-full p-2 border rounded-lg price-large'}}) }}
            {{ form_row(form.category, {'attr': {'class': 'w-full p-2 border rounded-lg'}}) }}

            <div id="toppings-container"
                 data-prototype="{{ form_widget(form.toppings.vars.prototype)|e('html_attr') }}"
                 data-index="{{ form.toppings|length }}">
                {% for toppingField in form.toppings %}
                    <div class="topping-item mb-2">
                        {{ form_widget(toppingField) }}
                        <button type="button" class="remove-topping bg-red-500 text-white px-2 py-1 rounded-lg ml-2">Remove</button>
                    </div>
                {% endfor %}
            </div>
        </div>

        <button type="submit" class="mt-4 px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-700">
            {{ button_label|default('Save') }}
        </button>

        {{ form_end(form) }}

        <div class="mt-4">
            <a href="{{ path('pizza_index') }}" class="text-blue-500 hover:underline">
                {{ 'action.back_to_list'|trans }}
            </a>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const collectionHolder = document.getElementById('toppings-container');
            const addButton = document.createElement('button');
            addButton.innerText = 'Add Topping';
            addButton.className = 'bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-700';
            collectionHolder.appendChild(addButton);

            let index = parseInt(collectionHolder.getAttribute('data-index'), 10) || 0;

            addButton.addEventListener('click', function (e) {
                e.preventDefault();

                const prototype = collectionHolder.getAttribute('data-prototype');
                const newForm = prototype.replace(/__name__/g, index.toString());

                const newElement = document.createElement('div');
                newElement.classList.add('topping-item', 'flex', 'items-center', 'gap-2', 'mb-2', 'mt-2', 'w-48');

                const inputWrapper = document.createElement('div');
                inputWrapper.classList.add('flex-grow', 'p-2', 'border', 'rounded-lg', 'overflow-hidden');
                inputWrapper.innerHTML = newForm;

                const removeButton = document.createElement('button');
                removeButton.type = 'button';
                removeButton.innerText = 'Remove';
                removeButton.className = 'remove-topping bg-red-500 text-white px-2 py-1 rounded-lg flex-shrink-0';


                removeButton.addEventListener('click', function () {
                    newElement.remove();
                });

                newElement.appendChild(inputWrapper);
                newElement.appendChild(removeButton);

                collectionHolder.appendChild(newElement);

                index++;
                collectionHolder.setAttribute('data-index', index.toString());
            });

            collectionHolder.querySelectorAll('.remove-topping').forEach(function (button) {
                button.addEventListener('click', function () {
                    button.closest('.topping-item').remove();
                });
            });
        });
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Pobierz elementy formularza
            const priceSmallField = document.querySelector('.price-small').closest('.space-y-4 > div');
            const priceLargeField = document.querySelector('.price-large').closest('.space-y-4 > div');
            const priceInput = document.querySelector('[name="pizza[price]"]');

            // Pobierz wartości modyfikatorów z atrybutów data
            const calculationType = priceInput.dataset.calculationType || 'fixed';
            const smallModifier = parseFloat(priceInput.dataset.smallModifier) || 0;
            const largeModifier = parseFloat(priceInput.dataset.largeModifier) || 0;

            // Ukryj pola cenowe dla small i large na początku
            priceSmallField.classList.add('hidden');
            priceLargeField.classList.add('hidden');

            // Stwórz selektor rozmiarów
            const sizeSelector = document.createElement('div');
            sizeSelector.className = 'mb-4 mt-4';
            sizeSelector.innerHTML = `
        <label class="block text-gray-700 mb-2 font-medium">Dostępne rozmiary:</label>
        <div class="flex space-x-4">
            <label class="inline-flex items-center">
                <input type="checkbox" name="size-small" class="text-blue-600">
                <span class="ml-2">Small</span>
            </label>
            <label class="inline-flex items-center">
                <input type="checkbox" name="size-large" class="text-blue-600">
                <span class="ml-2">Large</span>
            </label>
        </div>
    `;

            // Wstaw selektor rozmiarów przed polem ceny dla small
            priceSmallField.parentNode.insertBefore(sizeSelector, priceSmallField);

            // Funkcja obliczająca cenę na podstawie modyfikatorów
            function calculatePrice(basePrice, size) {
                if (calculationType === 'fixed') {
                    if (size === 'small') return Math.max(0, basePrice - smallModifier);
                    if (size === 'large') return basePrice + largeModifier;
                } else {
                    // procentowy
                    if (size === 'small') return basePrice * (1 - (smallModifier / 100));
                    if (size === 'large') return basePrice * (1 + (largeModifier / 100));
                }
                return basePrice; // domyślnie medium
            }

            // Dodaj obsługę zdarzeń do checkboxów
            const checkboxSmall = document.querySelector('[name="size-small"]');
            const checkboxLarge = document.querySelector('[name="size-large"]');
            const priceSmallInput = document.querySelector('[name="pizza[priceSmall]"]');
            const priceLargeInput = document.querySelector('[name="pizza[priceLarge]"]');

            // Przy zmianie głównej ceny, aktualizuj również ceny small i large
            priceInput.addEventListener('input', function() {
                const basePrice = parseFloat(this.value) || 0;

                if (checkboxSmall.checked && priceSmallInput.value === '') {
                    priceSmallInput.value = calculatePrice(basePrice, 'small').toFixed(2);
                }

                if (checkboxLarge.checked && priceLargeInput.value === '') {
                    priceLargeInput.value = calculatePrice(basePrice, 'large').toFixed(2);
                }
            });

            checkboxSmall.addEventListener('change', function() {
                if (this.checked) {
                    priceSmallField.classList.remove('hidden');

                    // Sugerowana wartość na podstawie ceny głównej
                    const basePrice = parseFloat(priceInput.value) || 0;
                    if (priceSmallInput.value === '') {
                        priceSmallInput.value = calculatePrice(basePrice, 'small').toFixed(2);
                    }
                } else {
                    priceSmallField.classList.add('hidden');
                    // Wyczyść wartość pola
                    priceSmallInput.value = '';
                }
            });

            checkboxLarge.addEventListener('change', function() {
                if (this.checked) {
                    priceLargeField.classList.remove('hidden');

                    // Sugerowana wartość na podstawie ceny głównej
                    const basePrice = parseFloat(priceInput.value) || 0;
                    if (priceLargeInput.value === '') {
                        priceLargeInput.value = calculatePrice(basePrice, 'large').toFixed(2);
                    }
                } else {
                    priceLargeField.classList.add('hidden');
                    // Wyczyść wartość pola
                    priceLargeInput.value = '';
                }
            });
        });
    </script>
{% endblock %}